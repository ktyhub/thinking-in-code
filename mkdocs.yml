site_name: Thinking In Code
site_url: https://www.ktyhub.com
site_author: ktyhub
site_description: knowledge thinking you want to know
site_dir: site
copyright: |
  可微信搜索 《中间件源码》 联系，订阅内容。  
  Copyright &copy; 2022 - 2024 ktyhub.com  
  部分内容由GPT提供 转载声明：  本文转载自 [原文标题](原文链接)，由[www.ktyhub.com](www.ktyhub.com)创作，遵循
  [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/) 许可协议。
google_analytics:
  - G-RFRF1TVRMP
  - www.ktyhub.com
theme:
  name: material
  language: zh
  static_templates:
    - 404.html
  include_search_page: true
  search_index_only: true
  features:
    - navigation.instant
    - navigation.instant.prefetch
    - navigation.instant.progress
    - navigation.tabs.fixed
    - navigation.tabs.sticky
    - navigation.tracking
    - navigation.tabs
    - navigation.sections
    - navigation.expand
    - navigation.path
    - navigation.prune
    - navigation.indexes
    - navigation.top
    - navigation.footer
    - toc.follow
    - toc.integrate
    - search.highlight
    - search.share
    - search.suggest
    - content.code.copy
    - content.code.select
    - content.code.annotate
    - content.tooltips
    - content.tabs.link
    - content.action.edit
    - content.action.view
    - header.autohide
    - announce.dismiss
  palette:
    scheme: default
    primary: white
    accent: black
  font:
    text: Noto Sans Traditional Chinese
    code: Noto Sans Traditional Chinese
plugins:
  - search:
      lang:
        - en
        - zh
      separator: '[\s\-,:!=\[\]()"`/]+|\.(?!\d)|&[lg]t;|(?!\b)(?=[A-Z][a-z])'
extra:
  alternate:
    - name: 中文
      link: /zh/
      lang: zh
  social:
    - icon: fontawesome/brands/github
      link: https://github.com/ktyhub/thinking-in-code
      name: GitHub Repository
    - icon: fontawesome/solid/globe
      link: https://www.ktyhub.com
      name: Official Website
    - icon: fontawesome/brands/weixin
      link: '#'
      name: WeChat - 中间件源码
  analytics:
    provider: google
    property: G-RFRF1TVRMP
    feedback:
      title: Was this page helpful?
      ratings:
        - icon: material/emoticon-happy-outline
          name: This page was helpful
          data: 1
          note: Thanks for your feedback!
        - icon: material/emoticon-sad-outline
          name: This page could be improved
          data: 0
          note: Thanks for your feedback! Help us improve this page by <a href="https://github.com/ktyhub/thinking-in-code/issues/new/?title=[Feedback]+{title}+-+{url}" target="_blank" rel="noopener">telling us what you found lacking</a>.
  consent:
    title: Cookie consent
    description: We use cookies to recognize your repeated visits and preferences,
      as well as to measure the effectiveness of our documentation and whether users
      find what they're searching for. With your consent, you're helping us to make
      our documentation better.
    actions:
      - accept
      - reject
      - manage
extra_css:
  - stylesheets/extra.css
  - stylesheets/ux-enhanced.css
  - stylesheets/white-theme.css
  - mermaid.css
extra_javascript:
  - /javascripts/google-tongji.js
  - mermaid.min.js
  - /javascripts/baidu-tongji.js
  - /javascripts/fun-interactions.js
  - /javascripts/ux-enhanced.js
extra_files:
  - CNAME
markdown_extensions:
  - abbr
  - admonition
  - attr_list
  - def_list
  - footnotes
  - md_in_html
  - toc:
      permalink: true
  - pymdownx.arithmatex:
      generic: true
  - pymdownx.betterem:
      smart_enable: all
  - pymdownx.caret
  - pymdownx.details
  - pymdownx.highlight:
      anchor_linenums: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.keys
  - pymdownx.mark
  - pymdownx.smartsymbols
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.tasklist:
      custom_checkbox: true
  - pymdownx.tilde

# nav部分已经按照多级目录规范优化
nav:
  - 🏠 首页: index
  - 📚 前言:
      - 📖 关于本书: zh/chapter_preface/about_the_book/
      - 💡 建议: zh/chapter_preface/suggestions/
      - 📝 总结: zh/chapter_preface/summary/
  - 🚀 技术体系:
      - 🔥 热门技术:
          - ⚡ ElasticJob 分布式调度:
              - 📖 概述: zh/chapter_elasticjob/
              - 📖 分布式调度系统简介: zh/chapter_elasticjob/1-introduce/
              - 🏗️ 注册中心的设计原理: zh/chapter_elasticjob/2-reg/
              - ⚙️ 建造者构造作业配置: zh/chapter_elasticjob/3-job-config/
              - 📋 调度作业模版类设计: zh/chapter_elasticjob/4-job-template/
              - 💾 分布式场景下存储配置: zh/chapter_elasticjob/5-job-config-storage/
              - 📝 单例模式作业注册表: zh/chapter_elasticjob/6-job-registry/
              - ⏰ Quartz下的单机执行: zh/chapter_elasticjob/7-quartz/
              - 🔄 系统启动时的生命周期: zh/chapter_elasticjob/8-job-life/
              - 👂 调度作业的监听器大全: zh/chapter_elasticjob/9-listener/
              - 🔒 分布式锁实现选主节点: zh/chapter_elasticjob/10-leader-latch/
              - 💾 服务和进程信息持久化: zh/chapter_elasticjob/11-server-instance/
              - ⚡ 云原生实践: zh/chapter_post/elasticjob_cloud/
          - ☸️ Kubernetes 云原生:
              - 📖 概述: zh/chapter_kubernetes/
              - 📥 克隆K8S源码: zh/chapter_kubernetes/1-index/
              - 🚀 ApiServer主流程: zh/chapter_kubernetes/2-apiserver/
              - ⚙️ ApiServer配置初始化: zh/chapter_kubernetes/3-apiserver-server-run-options/
              - 🏷️ ApiServer命令行标记: zh/chapter_kubernetes/4-apiserver-add-flags/
              - 🔗 ApiServer-API服务器链创建: zh/chapter_kubernetes/5-apiserver-server-run/
          - 🤖 Spring AI 人工智能:
              - 📖 概述: zh/chapter_spring_ai/
              - 📚 官网学习笔记: zh/chapter_spring_ai/1-official-website/
          - 🐘 Zookeeper 分布式协调:
              - 📖 概述: zh/chapter_zookeeper/
              - 📖 入门简介: zh/chapter_zookeeper/1-introduce/
              - 🏗️ 实现说明: zh/chapter_zookeeper/2-implement/
              - ⚙️ 安装配置: zh/chapter_zookeeper/3-install/
              - 💻 客户端入门: zh/chapter_zookeeper/4-client/
              - 🔒 锁与生产者消费者: zh/chapter_zookeeper/5-produce-and-consumer/
              - 👂 监听机制: zh/chapter_zookeeper/6-watch/
              - 🚀 服务器入口: zh/chapter_zookeeper/7-start-source/
              - ⚙️ 配置加载: zh/chapter_zookeeper/8-config/
              - 🧹 日志清理任务: zh/chapter_zookeeper/9-clear-log-start/
              - 🔄 初始化和启动: zh/chapter_zookeeper/10-init-main/
              - 🌐 网络IO初始化: zh/chapter_zookeeper/11-reactor/
              - 🏗️ QuorumPeer初始化: zh/chapter_zookeeper/12-quorumpeer-init/
              - 💾 初始化磁盘数据: zh/chapter_zookeeper/13-loaddatabase/
              - 🌐 Reactor网络IO: zh/chapter_zookeeper/14-reactor-io/
              - 🗳️ 选举算法的准备等待选举: zh/chapter_zookeeper/15-election/
              - 🔍 开始寻找leader: zh/chapter_zookeeper/16-lookforleader/
          - 🌐 Dubbo 微服务框架:
              - 📖 概述: zh/chapter_dubbo/
              - 📖 服务提供者的Demo: zh/chapter_dubbo/1-learn-from-a-demo/
              - ⚙️ ServiceConfig化: zh/chapter_dubbo/2-serviceconfig-config/
              - 🏗️ 领域模型Model对象: zh/chapter_dubbo/3-model-init/
              - 🔧 Extension的初始化: zh/chapter_dubbo/4-extension-init/
              - 🔄 getAdaptiveExtension方法: zh/chapter_dubbo/5-getadaptiveextension/
              - 📦 Extension的Wrapper机制: zh/chapter_dubbo/6-extension-wrapper/
              - ⚡ Extension的Activate机制: zh/chapter_dubbo/7-extension-activate/
              - 🚀 DubboBootstrap启动程序: zh/chapter_dubbo/8-dubbobootstrap/
              - ⚙️ ApplicationConfig: zh/chapter_dubbo/9-application-config/
              - 📝 RegistryConfig: zh/chapter_dubbo/10-registryconfig/
              - 🌐 ProtocolConfig: zh/chapter_dubbo/11-protocolconfig/
              - 🔄 启动生命周期: zh/chapter_dubbo/12-start-life-cycle/
              - ⚙️ 配置中心初始化: zh/chapter_dubbo/13-configcenter/
              - 📥 配置加载说明: zh/chapter_dubbo/14-config-load/
              - 📊 元数据中心说明: zh/chapter_dubbo/15-metadata/
              - 📦 模块发布器: zh/chapter_dubbo/16-moduledeployer/
              - 📝 提供者双注册: zh/chapter_dubbo/17-provider-register/
              - 📤 元数据服务的导出: zh/chapter_dubbo/18-metadataService-export/
              - 💻 消费者案例: zh/chapter_dubbo/19-consuemr-demo/
              - ⚙️ ReferenceConfig: zh/chapter_dubbo/20-reference-config/
              - 🔗 ReferServices: zh/chapter_dubbo/21-refer-services/
              - 🤖 自动决策应用级服务发现原理: zh/chapter_dubbo/22-migration-invoker/
          - 🍃 Spring Boot 框架:
              - 📖 概述: zh/chapter_springboot/
              - 📖 入门案例: zh/chapter_springboot/1-sample/
              - 🔌 SPI机制: zh/chapter_springboot/2-spi/
              - 🚀 运行流程: zh/chapter_springboot/3-run/
              - 🌍 环境配置: zh/chapter_springboot/4-environment/
              - 🏗️ 应用上下文初始化: zh/chapter_springboot/5-application-context-init/
              - 📖 读取器扫描器: zh/chapter_springboot/6-reader-scanner/
              - ⚛️ Spring Flux: zh/chapter_springboot/spring-flux/
      - 📊 大数据技术:
          - 🌊 Apache Kafka 消息队列:
              - 📖 概述: zh/chapter_kafka/
              - 📖 入门笔记: zh/chapter_kafka/1-introduce/
              - 🚀 高性能高可用设计: zh/chapter_kafka/2-high-performence/
              - 💻 客户端案例: zh/chapter_kafka/3-client-sample/
              - 📤 KafkaProducer: zh/chapter_kafka/4-kafka-producer/
              - 📨 发送器Sender: zh/chapter_kafka/5-sender/
              - 🧵 客户端的IO线程: zh/chapter_kafka/6-kafka-thread/
              - 🔄 KafkaProducer的初始化: zh/chapter_kafka/7-kafka-producer-init/
              - 📤 发送生产者数据: zh/chapter_kafka/8-send-producer-data/
              - ⚡ 执行IO事件: zh/chapter_kafka/9-execute-io/
              - 📥 处理IO结果: zh/chapter_kafka/10-handle-io/
              - 🔄 消费者相关:
                  - 📥 消费者订阅TOPIC: zh/chapter_kafka/10-消费者订阅TOPIC/
                  - 📥 消费者执行轮询消息poll方法: zh/chapter_kafka/11-消费者执行轮询消息poll方法/
                  - 📥 消费者尝试更新分配元数据: zh/chapter_kafka/12-消费者尝试更新分配元数据updateAssignmentMetadataIfNeeded/
                  - 📥 消费者Poll从服务端拉取数据: zh/chapter_kafka/13-消费者Poll从服务端拉取数据/
          - 🏠 ClickHouse 实时分析: zh/chapter_post/clickhouse/
          - 🌊 Apache Flink 流处理: zh/chapter_post/flink/
      - 🔍 可观测性:
          - 📝 Log4j2 日志系统: zh/chapter_post/log4j2/
          - 📊 Prometheus 监控: zh/chapter_post/prometheus/
          - 🔍 Micrometer 指标: zh/chapter_post/micrometer/
          - 🔗 Micrometer Tracing: zh/chapter_post/micrometer_tracing/
      - 🌐 网络通信:
          - 🚀 Netty 高性能网络:
              - 📖 概述: zh/chapter_netty/
              - 📖 Netty的入门: zh/chapter_netty/1-sample/
              - 🚀 启动器Bootstrapp: zh/chapter_netty/2-bootstrap/
              - 🔄 EventLoopGroup初始化: zh/chapter_netty/3-event-loop-group-init/
              - ⚙️ BootStrap属性设置: zh/chapter_netty/4-server-bootstrap-attr/
          - 📡 EMQX 消息中间件:
              - 📖 概述: zh/chapter_emqx/
              - 📖 入门介绍: zh/chapter_emqx/1-introduce/
              - 🏗️ 代码结构: zh/chapter_emqx/2-code-struct/
              - 🔧 内核: zh/chapter_emqx/3-kernel/
              - 🛣️ 路由器: zh/chapter_emqx/4-router/
              - 🏪 代理: zh/chapter_emqx/5-broker/
      - 💾 数据库技术:
          - 💧 Druid 连接池:
              - 📖 概述: zh/chapter_druid/
              - 📖 入门案例: zh/chapter_druid/1-sample/
              - 🔗 数据源: zh/chapter_druid/2-datasource/
              - 🔄 连接前准备: zh/chapter_druid/3-before-connection/
              - 🗄️ 数据库类型: zh/chapter_druid/4-db-type/
              - 📊 日志统计线程: zh/chapter_druid/5-log-stats-thread/
              - 🔧 创建和启动创建者线程: zh/chapter_druid/6-create-and-start-creator-thread/
              - 🚗 驱动连接: zh/chapter_druid/7-driver-connect/
              - ✅ 验证连接: zh/chapter_druid/8-validate-connection/
              - 🗑️ Druid销毁: zh/chapter_druid/9-druid-destroy/
      - 🔄 响应式编程:
          - ⚛️ Reactor 响应式:
              - 📖 概述: zh/chaptor_reactor/
              - 🌊 Flux: zh/chaptor_reactor/1-Flux/
              - 📤 Flux.push: zh/chaptor_reactor/2-Flux.push/
              - 🔧 Flux.handle: zh/chaptor_reactor/3-Flux.handle/
              - 🎭 Mono: zh/chaptor_reactor/4-Momo/
              - 📋 BaseSubscriber: zh/chaptor_reactor/5-BaseSubscriber/
              - ⏰ Scheduler: zh/chaptor_reactor/6-Scheduler/
              - 🔄 Schedulers.elastic: zh/chaptor_reactor/7-Schedulers.elastic/
      - 🔐 分布式事务:
          - 🔒 Seata 分布式事务:
              - 📖 概述: zh/chapter_seata/
              - 📚 官网学习: zh/chapter_seata/1-official-website/
              - 🌐 网络源码: zh/chapter_seata/2-net-source/
              - 🔧 TCC设计: zh/chapter_seata/tcc-design/
              - 👤 TCC用户: zh/chapter_seata/tcc-user/
  - 🤖 AI 技术栈:
      - 🌱 Spring AI:
          - 📚 官网学习笔记: zh/chapter_spring_ai/1-official-website/
      - 🤖 Spring AI Alibaba:
          - 📚 官网学习笔记: zh/chapter_spring_ai_alibaba/1-official-website/
          - 🛫 航班预订示例: zh/chapter_spring_ai_alibaba/2-spring-ai-alibaba-flight-booking-readme/
          - 🎮 航班助手控制器: zh/chapter_spring_ai_alibaba/3-spring-ai-alibaba-flight-assistant-controller/
          - 🔍 相似性搜索初始化: zh/chapter_spring_ai_alibaba/4-spring-ai-alibaba-flight-similaritySearch-init/
      - 🔌 Model Context Protocol:
          - 📚 官网学习笔记: zh/chapter_modelcontextprotocol/1-official-website/
      - 🧠 人工智能基础:
          - 📐 线性代数: zh/chapter_ai/01-线性代数/
          - 🤖 机器学习: zh/chapter_ai/02-机器学习/
          - 🧠 人工神经网络: zh/chapter_ai/03-人工神经网络/
          - 🔬 深度学习: zh/chapter_ai/04-深度学习/
          - 🌐 深度学习的神经网络: zh/chapter_ai/05-深度学习的神经网络/
  - 💻 编程语言:
      - ☕ Java 开发:
          - 🔧 JDK 开发: zh/chapter_jdk/
          - 🔧 JDK17 特性: zh/chapter_jdk/jdk17/
          - 🛠️ 开发属于自己的JDK版本: zh/chapter_jdk/过五关斩六将开发属于自己的jdk版本/
      - 🔴 Erlang 编程:
          - 📖 语法与基础:
              - 📖 Erlang语法基础: zh/chapter_erlang/1-erlang语法基础/
              - 🔄 Erlang的并发: zh/chapter_erlang/2-erlang的并发/
              - 🌐 Erlang分布式编程: zh/chapter_erlang/3-erlang分布式编程/
              - 🔌 套接字编程: zh/chapter_erlang/4-套接字编程/
              - 💾 ETS和DETS存储数据: zh/chapter_erlang/5-ETS和DETS存储数据/
              - 🗄️ 分布式数据库Mnesia: zh/chapter_erlang/6-分布式数据库Mnesia/
              - 🔍 性能分析、调试与跟踪: zh/chapter_erlang/7-性能分析、调试与跟踪/
          - 🛠️ Rebar3工具:
              - 🛠️ Rebar3从一个例子入门: zh/chapter_erlang/1-Rebar3从一个例子入门/
              - ⚙️ Rebar3相关的环境变量配置: zh/chapter_erlang/2-Rebar3相关的环境变量配置/
              - 📋 Rebar3命令行: zh/chapter_erlang/3-Rebar3命令行/
          - 🔌 esockd网络库:
              - 🔌 esockd入门: zh/chapter_erlang/1-escockd入门/
              - 📡 esockd例子echo: zh/chapter_erlang/2-esockd例子echo/
  - 🧮 算法与数据结构:
      - 🌳 二叉树算法:
          - 📋 前序遍历: zh/chapter_algorithm/114-preorder/
          - 📋 后序遍历: zh/chapter_algorithm/145-二叉树的后序遍历/
          - 🔄 翻转二叉树: zh/chapter_algorithm/226-翻转二叉树/
      - 🔗 链表算法:
          - ⚡ 相交链表: zh/chapter_algorithm/160-相交链表/
          - 🗑️ 移除链表元素: zh/chapter_algorithm/203-移除链表元素/
          - 🔄 反转链表: zh/chapter_algorithm/206-反转链表/
      - 🔢 数学算法:
          - 😊 快乐数: zh/chapter_algorithm/202-快乐数/
          - 🔤 同构字符串: zh/chapter_algorithm/205-同构字符串/
          - 🔍 外观数列: zh/chapter_algorithm/38-外观数列/
      - 🔍 搜索算法:
          - 🎯 在排序数组中查找元素的第一个和最后一个位置: zh/chapter_algorithm/34-在排序数组中查找元素的第一个和最后一个位置/
          - ✅ 有效的数独: zh/chapter_algorithm/36-有效的数独/
      - 🎯 组合算法:
          - 🎲 组合总和: zh/chapter_algorithm/39-组合总和/
          - 🎲 组合总和 II: zh/chapter_algorithm/40-组合总和 II/
      - 📚 数据结构:
          - 📚 用队列实现栈: zh/chapter_algorithm/225-用队列实现栈/
  - 🐧 Linux 系统:
      - 🔍 问题分析:
          - 🔧 Linux问题分析: zh/chapter_linux/problem/5-linux问题分析/
          - ⏱️ Dubbo超时问题: zh/chapter_linux/problem/6-Dubbo超时问题/
          - 💻 CPU问题: zh/chapter_linux/problem/cpu/
          - 💾 内存问题: zh/chapter_linux/problem/memory/
          - 💿 磁盘问题: zh/chapter_linux/problem/disk/
          - 🌐 网络问题: zh/chapter_linux/problem/net/
          - 🔍 strace工具: zh/chapter_linux/problem/strace工具/
      - 🌐 网络系统:
          - 📡 网络排查: zh/chapter_linux/net/2-网络排查/
          - 📥 网络输入: zh/chapter_linux/net/net_in/
      - 💾 内存管理:
          - 📄 PageCache: zh/chapter_linux/io/PageCache/
          - 🗂️ 页缓存: zh/chapter_linux/mm/pagecache/
      - 🔬 eBPF 技术:
          - 📖 eBPF 入门: zh/chapter_linux/ebpf/1-ebpf/
          - 👋 eBPF Hello: zh/chapter_linux/ebpf/ebpf_hello/
  - 📚 深度专题:
      - 🔗 精选网址收藏: zh/chapter_post/site/
  - 🆕 新技术发布:
      - 📋 发布说明总览: zh/release_note/index.md
      - 🍃 Spring Boot v3.3.12: zh/release_note/Spring-Boot_v3.3.12/
      - 🤖 OpenHands 0.39.0: zh/release_note/OpenHands_0.39.0_-_2025-05-20/
      - ⚡ FastGPT V4.9.10: zh/release_note/FastGPT_V4.9.10-alpha/
      - 📦 更多发布说明:
          - 🔄 Spring 相关:
              - 🍃 Spring Framework:
                  - v6.0.22: zh/release_note/spring-framework_v6.0.22/
                  - v6.1.10: zh/release_note/spring-framework_v6.1.10/
                  - v6.1.11: zh/release_note/spring-framework_v6.1.11/
                  - v6.1.13: zh/release_note/spring-framework_v6.1.13/
                  - v6.1.14: zh/release_note/spring-framework_v6.1.14/
                  - v6.1.15: zh/release_note/spring-framework_v6.1.15/
                  - v6.1.16: zh/release_note/spring-framework_v6.1.16/
                  - v6.1.19: zh/release_note/spring-framework_v6.1.19/
                  - v6.1.20: zh/release_note/spring-framework_v6.1.20/
                  - v6.2.0: zh/release_note/spring-framework_v6.2.0/
                  - v6.2.3: zh/release_note/spring-framework_v6.2.3/
                  - v6.2.7: zh/release_note/spring-framework_v6.2.7/
                  - v7.0.0-M1: zh/release_note/spring-framework_v7.0.0-M1/
              - 🔒 Spring Security:
                  - v6.3.9: zh/release_note/spring-security_6.3.9/
              - 🍪 Spring Session:
                  - v3.2.7: zh/release_note/spring-session_3.2.7/
                  - v3.3.4: zh/release_note/spring-session_3.3.4/
                  - v3.3.5: zh/release_note/spring-session_3.3.5/
                  - v3.4.0: zh/release_note/spring-session_3.4.0/
          - 🐳 容器与云原生:
              - 🐋 Docker/Moby:
                  - v25.0.8: zh/release_note/moby_v25.0.8/
                  - v27.4.0-rc.3: zh/release_note/moby_v27.4.0-rc.3/
                  - v27.4.0-rc.4: zh/release_note/moby_v27.4.0-rc.4/
                  - v28.0.0: zh/release_note/moby_v28.0.0/
                  - v28.0.1: zh/release_note/moby_v28.0.1/
                  - v28.1.0-rc.1: zh/release_note/moby_v28.1.0-rc.1/
              - 🐮 Rancher:
                  - v2.10.0-alpha11: zh/release_note/rancher_Pre-release v2.10.0-alpha11/
                  - v2.10.3-rc1: zh/release_note/rancher_Pre-release v2.10.3-rc1/
                  - v2.11.0-alpha13: zh/release_note/rancher_Pre-release v2.11.0-alpha13/
                  - v2.11.0-rc6: zh/release_note/rancher_v2.11.0-rc6/
                  - v2.12.0-alpha5: zh/release_note/rancher_Pre-release v2.12.0-alpha5/
              - 🚢 Harbor:
                  - v2.12.0-rc1: zh/release_note/harbor_v2.12.0-rc1/
                  - v2.12.1: zh/release_note/harbor_v2.12.1/
                  - v2.12.2: zh/release_note/harbor_v2.12.2/
                  - v2.12.2-rc2: zh/release_note/harbor_v2.12.2-rc2/
                  - v2.13.1-rc1: zh/release_note/harbor_v2.13.1-rc1/
          - 🤖 AI 相关:
              - 🦙 Ollama:
                  - v0.5.12: zh/release_note/ollama_v0.5.12/
                  - v0.6.3: zh/release_note/ollama_v0.6.3/
                  - v0.6.5: zh/release_note/ollama_v0.6.5/
                  - v0.6.7: zh/release_note/ollama_v0.6.7/
              - 🐼 Pandas-AI:
                  - v3.0.0-beta.14: zh/release_note/pandas-ai_v3.0.0-beta.14/
                  - v3.0.0-beta.17: zh/release_note/pandas-ai_v3.0.0-beta.17/
                  - v3.0.0a16: zh/release_note/pandas-ai_v3.0.0a16/
              - 🔍 RAGFlow:
                  - v0.11.0: zh/release_note/ragflow_RAGFlow-0.11.0/
                  - v0.12.0: zh/release_note/ragflow_RAGFlow-0.12.0/
                  - v0.13.0: zh/release_note/ragflow_RAGFlow-0.13.0/
                  - v0.14.0: zh/release_note/ragflow_RAGFlow-0.14.0/
                  - v0.14.1: zh/release_note/ragflow_v0.14.1/
                  - v0.15.0: zh/release_note/ragflow_v0.15.0/
                  - v0.15.1: zh/release_note/ragflow_v0.15.1/
                  - v0.17.0: zh/release_note/ragflow_v0.17.0/
                  - v0.17.1: zh/release_note/ragflow_v0.17.1/
                  - v0.18.0: zh/release_note/ragflow_v0.18.0/
                  - v0.19.0: zh/release_note/ragflow_v0.19.0/